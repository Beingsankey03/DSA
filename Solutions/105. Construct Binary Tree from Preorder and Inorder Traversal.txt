import java.util.HashMap;

class Solution {
    private int preIndex = 0; // Pointer to track root in preorder
    private HashMap<Integer, Integer> inorderMap;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        inorderMap = new HashMap<>();
        // Store value -> index mapping for inorder
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }
        return build(preorder, 0, inorder.length - 1);
    }

    private TreeNode build(int[] preorder, int inStart, int inEnd) {
        if (inStart > inEnd) return null;

        // Get current root from preorder
        int rootVal = preorder[preIndex++];
        TreeNode root = new TreeNode(rootVal);

        // Find root index in inorder
        int inIndex = inorderMap.get(rootVal);

        // Build left & right subtrees recursively
        root.left = build(preorder, inStart, inIndex - 1);
        root.right = build(preorder, inInde
